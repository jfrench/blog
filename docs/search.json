[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Posts",
    "section": "",
    "text": "Interactive Notebook\n\n\n\n\n\n\n\nmarkdown\n\n\n\n\n\n\n\n\n\n\n\nJun 21, 2023\n\n\nJoshua French\n\n\n\n\n\n\n  \n\n\n\n\nData Visualization in Statistical Research\n\n\n\n\n\n\n\nmarkdown\n\n\n\n\n\n\n\n\n\n\n\nJun 21, 2023\n\n\nJoshua French\n\n\n\n\n\n\n  \n\n\n\n\nAdding unicode characters with accents to Quarto markdown documents\n\n\n\n\n\n\n\nmarkdown\n\n\n\n\n\n\n\n\n\n\n\nJun 14, 2023\n\n\nJoshua French\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I am a statistician and data scientist. I am currently the Director of Data Science at the University of Colorado Denver and an Associate Professor in the Department of Mathematical and Statistical Sciences.\nI am passionate about using statistics and data science to learn from data, developing software to help others learn from data, and training others to do data analysis."
  },
  {
    "objectID": "posts/accents-in-md/accents-in-md.html",
    "href": "posts/accents-in-md/accents-in-md.html",
    "title": "Adding unicode characters with accents to Quarto markdown documents",
    "section": "",
    "text": "We sometimes need to write a word or name with an accent in a markdown document, e.g., café, naïve, façade, jalapeño, Scheffé.\nYou can do this by adding unicode characters to your document. Unicode is an international standard used to render language consistently on computers.\nTo add a unicode character in a markdown document:\n\nIdentify the decimal number of the character you want to include. Wikipedia has a nice list at https://en.wikipedia.org/wiki/List_of_Unicode_characters.\nWhen you need to add the accented unicode character:\n\n\nUse &# to indicate the start of the unicode character\nWrite the decimal number of the character.\nUse ; to indicate the end of the unicode character.\n\n\nRender the document.\n\n\nHTML documents will render without issue.\nIf you are rendering to pdf, then you will likely need to change the latex engine to xelatex or luatex. In the YAML header, use something like:\n\noutput:\n  pdf_document: \n    latex_engine: xelatex\nHere are some examples:\ncafé is written as caf&#233;\nnaïve is written as na&#239;ve\nfaçade is written as fa&#231;ade\njalapeño is written as jalape&#241;o\nThis text:\n&#223; &#228; &#233; &#239; &#241; &#343;\n\n&#242; &#246; &#163; &#165; &#174; &#275;\nproduces the following output.\nß ä é ï ñ ŗ\nò ö £ ¥ ® ē"
  },
  {
    "objectID": "posts/wnar-2023-demo/wnar-2023-demo.html",
    "href": "posts/wnar-2023-demo/wnar-2023-demo.html",
    "title": "Data Visualization in Statistical Research",
    "section": "",
    "text": "Introduction\nWe can weave rich narratives with formatted text and equations like \\(y = \\beta_0 + \\beta_1 x + \\epsilon\\) very easily.\n\n\nReproducible\nWe can put our analysis in an environment that ensures reproducibility.\n\n\nAdded explanation\nWe can add videos discussing the analysis if we want.\n\n\n\nCode and Output\nWe can easily include code and the resulting output and graphics.\nWe load a necessary package.\n\nlibrary(ggplot2)\n\nWe can now create a plot.\n\nggplot(faithfuld, aes(waiting, eruptions)) + \n  geom_raster(aes(fill = density))\n\n\n\n\n\n\nA Spatial Example\nInteractive maps can provide a lot of information. We will create an interactive map using ggplot2, plotly, and the sf package.\n\n\nLinking to GEOS 3.11.2, GDAL 3.6.2, PROJ 9.2.0; sf_use_s2() is TRUE\n\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\n\nFirst, we use the st_read function from the sf package to read a shapefile related to North Carolina packages that is installed by default with the sf package. The imported shapefile is automatically converted to an sf data frame. The imported object has many variables, but we point out three:\n\nNAME: the name of each North Carolina county\nBIR74: the number of recorded births in each county in 1974.\ngeometry: the MULTIPOLYGON associated with each North Carolina county.\n\n\n# import sf object from shapefile in sf package\nnc &lt;- sf::st_read(system.file(\"shape/nc.shp\", package = \"sf\"),\n                  quiet = TRUE)\n# display first 3 rows of nc for certain variables\nhead(nc[c(\"NAME\", \"BIR74\", \"geometry\")], n = 3)\n\nSimple feature collection with 3 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -81.74107 ymin: 36.23388 xmax: -80.43531 ymax: 36.58965\nGeodetic CRS:  NAD27\n       NAME BIR74                       geometry\n1      Ashe  1091 MULTIPOLYGON (((-81.47276 3...\n2 Alleghany   487 MULTIPOLYGON (((-81.23989 3...\n3     Surry  3188 MULTIPOLYGON (((-80.45634 3...\n\n\nIn the code below, we:\n\nUse ggplot2 to create a choropleth map of BIR74 for each county using geom_sf.\n\nWe specify fill = BIR74 so that the fill color of each county is based on the BIR74 variable.\nWe also associate the NAME variable with the label aesthetic so that the name of each county is displayed when we hover over a county.\nUse scale_fill_viridis_c to change the color palette used for the fill color.\nWe assign this plot the name ggsf.\n\nUse plotly::ggplotly to make the graphic interactive.\n\nThe interactive graphic indicates the number of births in each county and the county name when we hover over a county.\n\n# plot sf object using ggplot2\nggsf &lt;-\n  ggplot(nc) +\n  geom_sf(aes(fill = BIR74, label = NAME)) +\n  scale_fill_viridis_c()\n# make map interactive\nggplotly(ggsf)\n\n\n\n\n\nIs there a way to provide information from multiple variable simultaneously when we hover over a county? Yes! But we have to be creative. We:\n\nUse the paste0 function to create a new variable, info, that combines multiple variables into a single character string for each county. The \\n indicates to start a new line. We add a new line before each variable name.\nAdd the info variable as a variable to the nc data frame.\n\n\n# combine multiple variables into a character string \n# (one per county)\ninfo &lt;- paste0(\n  \"\\nname: \", nc$NAME,\n  \"\\narea: \", nc$AREA,\n  \"\\nbirths in 1974: \", nc$BIR74,\n  \"\\nSIDS cases in 1974: \", nc$SID74)\n# print first 2 values of info\ninfo[1:2]\n\n[1] \"\\nname: Ashe\\narea: 0.114\\nbirths in 1974: 1091\\nSIDS cases in 1974: 1\"    \n[2] \"\\nname: Alleghany\\narea: 0.061\\nbirths in 1974: 487\\nSIDS cases in 1974: 0\"\n\n# add info the nc\nnc$info &lt;- info\n\nNow, we use info as the label aesthetic in geom_sf and specify tooltip = \"label\" so that only the label variable is displayed when we hover over a county.\n\n# create map that fills based on BIR74 but the tooltip\n# based on info\nggsf &lt;-\n  ggplot(nc) +\n  geom_sf(aes(fill = BIR74, label = info)) +\n  scale_fill_viridis_c()\n# show only label tooltip\nggplotly(ggsf, tooltip = \"label\")\n\n\n\n\n\nWe can create an interactive plot using plot_ly. We:\n\nSpecify type = \"scatter\" and mode = \"lines\".\nAssociate the info variable in nc with the split attribute to draw the separate traces for each county. We could have used NAME, but then only the NAME of each county would be displayed when we hover. This way, we get additional information.\nAssociate the BIR74 variable in nc with the color attribute to fill each county with a color from a gradient.\nSpecify showlegend = FALSE so that only the color scale is displayed and no legend related to info. This is a critical step.\nSpecify alpha = 1 so that the colors aren’t muted.\nSpecify hoverinfo = \"text\" so the only the split information is displayed\nPipe this graphic into the colorbar function and change the title to “BIR74” (otherwise it gets displayed twice).\n\n\nplot_ly(nc,\n        color = ~BIR74,\n        split = ~info,\n        showlegend = FALSE,\n        alpha = 1,\n        type = \"scatter\",\n        mode = \"lines\",\n        hoverinfo = \"text\")  |&gt;\n  colorbar(title = \"BIR74\")"
  },
  {
    "objectID": "posts/interactive-notebook/z-oer-demo-notebook.html",
    "href": "posts/interactive-notebook/z-oer-demo-notebook.html",
    "title": "Interactive Notebook",
    "section": "",
    "text": "To open this information in an interactive Colab notebook, click the Open in Colab graphic below.\n  \n\nLoad some data\n\ndata(mtcars)\n\n\n\nCreate some plots\nCreate a scatter plot of mpg vs wt.\n\nplot(mpg ~ wt, data = mtcars,\n     xlab = \"weight (1000 lbs)\",\n     ylab = \"miles per gallon\")\n\n\n\n\n\n\nBuild a model\n\nlmod &lt;- lm(mpg ~ wt, data = mtcars)\n\n\n\nFit of model\n\nplot(mpg ~ wt, data = mtcars,\n     xlab = \"weight (1000 lbs)\",\n     ylab = \"miles per gallon\")\nabline(lmod)"
  },
  {
    "objectID": "posts/interactive-notebook/interactive-notebook.html",
    "href": "posts/interactive-notebook/interactive-notebook.html",
    "title": "Interactive Notebook",
    "section": "",
    "text": "To open this information in an interactive Colab notebook, click the Open in Colab graphic below.\n  \n\nLoad some data\n\ndata(mtcars)\n\n\n\nCreate some plots\nCreate a scatter plot of mpg vs wt.\n\nplot(mpg ~ wt, data = mtcars,\n     xlab = \"weight (1000 lbs)\",\n     ylab = \"miles per gallon\")\n\n\n\n\n\n\nBuild a model\n\nlmod &lt;- lm(mpg ~ wt, data = mtcars)\n\n\n\nFit of model\n\nplot(mpg ~ wt, data = mtcars,\n     xlab = \"weight (1000 lbs)\",\n     ylab = \"miles per gallon\")\nabline(lmod)"
  }
]